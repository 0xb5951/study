正確にfloat,doubleが計算できるようにする。

float
浮動小数点計算(Floating Point Operation)の略。
小数を扱うデータ型で、正負を表す符号部と固定長の基数と指数部からなる。
例えば、12.8なら　基数＝0.8　指数＝4　となり、
これは　0.8*2^4　となる。指数部の底は2である。
また0.25なら　基数＝0.5　指数＝-1　となり、
これは　0.5*2^-1 となる。

float型はすべての数が基数×2^指数で表している。
ここからわかることは
1.ある程度以上細かい数字は表せない
2.数が大きくなれば、おおざっぱにしか表せない
当然、このような条件でも問題が発生しないように設計されているが、以下の
ような場合には特別な注意が必要になってくる。

非常に小さな値を扱う場合
非常に大きな値を扱う場合
正確さが要求される大規模な計算を行う場合

丸め誤差
float型やdouble型で表現可能なビット数はそれぞれ32と64。
なので、値を表すとき真値ではなく、ある程度近似した数が表現される。

桁落ち
1.0000101と1.00000100のように非常に近い値の引き算を行ったときに生じる誤差。
端的にいうと計算結果が0に極端に近づくような計算を行ったときに発生する。


情報落ち
大きな数を小さな数を加減算したときに小さな値が大きな値に埋もれてしまうこと。
1000000に0.000001を100万回加えたとき、正確な答えは100001となるが、
実際の答えは1000000のままである。
これは浮動小数点型において、極端に大きさの違う2つの数の計算では小さな数が
無視されてしまうという性質によるもの。
あんまり離れた数を計算しないようにしよう。

打ち切り誤差
無限等比級数など、無限に続く計算を行いたい場合、本当に無限回の計算を行うわけにはいかない。
なので、ある程度回数が行ったらそれ以降は無視される。この誤差を打ち切り誤差という。
この誤差において時間と精度はトレードオフの関係にある。

このような特性からfor文やwhile文のループの脱出条件としてfloat,double型の変数を
使うことは避けた方がいい。また計算を繰り返すごとにも誤差が増えていくので、
なるべく少ない計算で目的の値を得ることが大切になる。
