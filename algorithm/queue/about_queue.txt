キューの解説
キューはFIFO（first in first out）のアルゴリズム。
キューにデータが追加されるとデータ構造の末尾に追加される。
キューからデータが取り出されるときは最初に入れたノードから取り出される。

こうした特性からキューは様々なバッファ(ネットワークから流れてくるデータや
windowsのメッセージ、印刷ジョブなど次々に発生するデータや
要求を順番に適切に処理するまでの間、一時的にためておく場所)に用いられる。

実装
キューを実装するには配列では不十分。キューは情報を更新する度に順番がずれていくので
大きさに限りのある配列だといずれ破綻してしまう。これの解決方として「リングバッファ」
という方式が提案された。
これはキューの末尾が配列の最後尾に達したとき、配列の先頭へと戻ってくるようなアルゴリズム。
以下はこれについての説明となる。

基本的な動作
1.キューにデータを追加する
キューのしっぽが指すポインタの次の位置にデータを格納し、同時にキューのしっぽの位置を一つ増やす。
しっぽが配列の末尾うぃ超えると、配列の先頭に戻ってくる。またキューにデータを入れることを
「エンキュ(enqueue)」または「push」という。

2.キューからデータを読み出す
キューの先頭位置からデータを読み出す。

3.キューからデータを削除する
キューの先頭位置が指すポインタを１つ進める。もし配列の末尾を超えると再び配列の先頭に帰る。
まらキューからデータを削除＆読み出すことを「デキュ(dequeue)」または「pop」という。

エラー対応
1.キューが空
キューが空の場合はデキューできない。
これを防ぐには「しっぽの位置＝＝キューの先頭」となったときに空になったと判断すればいい。

2.キューが満杯
キューが配列の大きさ以上にデキュしちゃうとスタックオーバーフローしちゃう。
これを防ぐために配列をキューの大きさより1大きくしている。
通常の状態だたキューが満杯のときもqueue_first==quque_tailとなる。
配列を1つ余らせると、「しっぽの次の位置＝＝キューの先頭の一つ前の位置」とすることができ
この時にキューが満杯とすることができる。
また別の手法として、キューが空の状態を区別するための変数を用意しておくという手法がある。
