バックトラック法
大量の分岐があるような問題を扱う方法。難しいこと考えず、マシンパワーでぶつかれば何とかなるというアルゴリズム

再帰を利用して、試行回数を行うアルゴリズム。
仮定に仮定を重ねてひたすら突き進み、処理が息詰まると、戻って別の選択肢を実行する脳筋アルゴリズム。

例ではチェスのクイーンを8×8マスに8個、互いに取れない位置に配置するエイト・クイーン問題を解く。
クイーンは縦・横・斜めに自由移動できるので結構厄介。

バックトラック法ではとりあえず、一列目からクイーンを配置していき、これ以上無理というとこまでいく。
その状態では積んだということなので、一列前（5列目でつんだら4列目）に戻って違う場所にクイーンを置いて
試行を繰り返す。それを繰り返し、一列前を変えても無理だったら、2列前に変えて試行を繰り返す。
これをバックトラック法という。

ただこの方法も万能ではなく、閉ループに陥る可能性があるため、使えるものは限られる。
使えるのは明確な積みの状態があるやつだけ。積まないと再試行を行われない。
これを解消するには、すべての局面を記憶しておき、同じ局面に陥った場合は先ほどとは違う行動を
とるような処理を行えばいい。ただそのまま記憶するだけではメモリがいくらあっても足りないので
ハッシュ値を生成して、処理を行う。
ハッシュはこれだけでなく、試行錯誤で出現した局面の履歴を重複のないハッシュで残して
置くことで計算効率を向上させられる。

またバックトラック法では、解の複雑性が損なわれる可能性がある。
試行錯誤を繰り返すことで解にたどり着くことができても、
どのような道筋をたどったか考えてないので、そこにたどり着くまでに無駄な遠回りをしている可能性がある。
つまり、バックトラック法では最適解を求めることが難しい。
できないというわけではないが、単純に何回も異なるパターンの検証を行わなければならないので、非常にめんどう。
