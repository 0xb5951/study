文字列検索のについて解説
文字列検索は大量の文字列から特定のワードを抽出するほうふお。

リニアサーチ
文字列の先頭から対象の文字列が出てくるまで順番に見ていく。
最もシンプルな方法だが効率悪い。
文字列の長さをｍ、検索キーの長さをｎとしたときの計算量はO(mn)となる。

バイナリサーチ
バイナリサーチは対象がソート済みなことが使用条件なので、
ランダムな値が割り振られる文字列には使用できない。

KMP法
リニアサーチの無駄をなくしたアルゴリズム。
検索ワードの先頭が出現しなければ、文字列が一致することはないので、
対象の文字列に検索ワードの先頭が出てくるまでスルー。
また、検索ワードと少し違う文字列が出てきたとき、
次の位置での文字配列と検索ワードの先頭は一致している所から始めればいい。
つまり、検索ワードと違ったときに次の検索開始位置を弄ることで効率を上げた。
計算量はO(n)。検索のためのポインタが一方向にした移動しないため、ディスクやテープ
などのデータ検索にも用いられる。
しかし、アルゴリズムが値の保持や比較で複雑な文付加的な負荷（オーバーヘッド）が大きく
実践的でない。
まとめると、KMP法は探索済みテキストの情報から次の検索を始める位置を計算する
http://capm-network.com/?tag=C%E8%A8%80%E8%AA%9E%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0-KMP%E6%B3%95


BM法
実用レベルの文字列検索。
たいして複雑なものではなく、パターンの文字を先頭から比較するのではなく、
末尾から比較するようにしたもの。
こうすることで一気に検索を飛ばすことができる。
末尾の文字から比較していくので、一致しないとパターンずつ検索を移動できる。
検索にパターン含まれていない文字があると、パターン文字分移動が可能。
また検索でパターンに含まれている文字で不一致が発生した場合、
パターンの文字中の対象を位置に移動させてやればいい。
おなじ文字が何個もある場合はなるべくパターン内距離が空くように（先頭にちかい場所）
してやれば広く検索できる。
文字列検索のさい、パターンにある文字が対象の中に何回も出てくる場合、検索位置が
前に戻ってしまう現象が考えられる。このため、検索位置を把握しておき、
位置が前に戻ってしまう場合は移動処理を取りやめて、代わりに検索位置を一つ後ろに
ずらすような制御が必要になる。
計算量はO(m/n).
