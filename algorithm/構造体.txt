構造体とは「様々な種類の互いに関連するデータを1つにまとめたもの」。
構造体を構成する要素を構造体のメンバと呼ぶ。

構造体は一つのデータ型であり、宣言の必要がある。
struct 構造体タグ名　{メンバ}; /*構造体の宣言*/
struct 構造体タグ名　構造体変数名; /*構造体変数の宣言*/

ex.
struct _person {           /* _person がタグ名 */
    char name[20];        /* 文字配列型のメンバ name */
    char sex;              /* 文字型メンバ sex */
    int age;               /* 整数型メンバ age */
    double height;         /* 倍精度実数型メンバ height */
    double weight;         /* 倍精度実数型メンバ weight */
};


struct _person p;      /* p という名前の struct _person 型変数を宣言 */

構造体を使うときは常にstructと記述する必要があるが、正直面倒。
これを解決するにはtypedefを使う。
typedefは関数を再定義することのできる関数。
typedef 定義されている型　新しく定義する型名;

ex.
typedef int seisu_t;

int a;        /* これは整数型変数の宣言 */
seisu_t b;      /* これも整数型変数の宣言 */

こうすることでseisu_tという名前はint型と同様に役割を果たす。
また、typedefで定義した型名には_tをつける慣習がある。
これを構造体の宣言に用いるとシンプルな記述が可能となる。

ex.
typedef struct _person person_t; /*struct _person をperson_tという型名で定義する*/

person_t p;

/////////////////////////////////////////////////////////////////////////

typedef struct {  /* 構造体の型枠を定義して，同時にそれを型名 person_t として定義する */
    char name[20];
    char sex;
    int age;
    double height;
    double weight;
} person_t;

person_t p;             /* 変数名 p の person_t 型変数を宣言 */


構造体メンバへのアクセス
変数名の後に"."をつけ、メンバ名を指定すると構造体型変数の中にあるメンバにアクセスでき、
変数名の後に"->"をつけ、メンバ名を指定すると構造体変数のポインタからメンバにアクセスできる。


person_t p;           /* person_t 型変数 p の宣言 */
p.age = 30;         /* p 内のメンバ age に 30 を代入 */

構造体のメモリサイズ
構造体のサイズは変数のメモリサイズすべてを足したものよりも少し大きくなる。
理由はメモリへのアクセス速度を高めるために、アクセスに都合のいい位置
にメンバを配置するため、メンバとメンバの間に隙間（パディング）ができるため。

構造体の構造体
構造体の下にメンバとして構造体を作ることもできる。
アクセスには"."を二個使う。
typedef struct {
    person_t boy;   /* カップルのうちの男の子の情報 */
    person_t girl;  /* カップルのうちの女の子の情報 */
    int month;      /* 交際歴（月数） */
} couple_t;

構造体の引数
構造体は関数の引数として、構造体全体の値をコピーして渡すこともできる。
void printComplex(complex_t c)
{
    printf("%f + %f i\n", c.re, c.im);
}

main()
{
    complex_t c = {1.2, 3.4};
    printComplex(c);
}


構造体のポインタ
構造体のポインタは１つのデータ群の先頭アドレスを指している。
