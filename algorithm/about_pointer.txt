ポインタについての説明。

ポインタとは
アドレスを指し示すことでデータをやり取りする。
普通の変数は対象アドレスの中に入っている値をやり取りするが、アドレスは
対象の値が入っているアドレスごと扱うので、非常に便利。
普通の変数に対して＆をつけると、そのアドレスを指定することができる。
アドレスも増減させることができる。
使い方
int a;  //普通の変数宣言
int *p; //*をつけることでポインタ変数化
p = &a;  //ポインタ変数pの中に変数aのアドレスを格納

int *i[]; //配列としても宣言できる


またポインタ変数に*がついているときは「ポインタ変数が指すアドレスの中身」を指している。
つまり値として扱うことができる。


関数ポインタ
その前にエントリポイントについての説明。
エントリポイントはプログラムを実行する上で、プログラムが実行されるメモリアドレスのこと。
エントリポインタはコンパイル時に各関数において作られる。つまりエントリポイントは
関数のアドレスのこと。
関数ポインタとは、エントリポイントを扱うポインタ変数のこと。
これを使うことでこの変数から関数を実行することができる。
型名と引数が一致してないと使えない。
使い方
int add(int a, int b)        // 加算するだけの関数を定義
{  return (a + b);  }

int r;
int (*func)(int a, int b);   // 関数ポインタを定義
func = add;                  // 関数ポインタに関数の番地を代入
r = func(1, 2);              // 1と2を引数にして関数を呼び出す
関数ポインタを使うことで他の関数の引数に関数を渡すことができたり、
関数の配列を作って呼び出したりできる。

NULLポインタ
これは何のアドレスも指定しないポインタのこと。
初期化がされていないのとは違う。ポインタはアドレスを表す変数なので、数値の0で初期化する意味はない。
その代わりに初期化として番地0を表すNULLポインタを使用する。この番地0は特殊な番地で書き込むことができない。
使い方
int *p;
p = NULL;

scanfを使う時に＆を使う理由
入力するときに重要なのは、どのアドレスに値を入れるかということ。
プログラム内では普通に代入することもできるが、scanfでは入力されるのが
外からのため、値ではなくアドレスで指定する。

ポインタのポインタ
ポインタ変数にポインタ変数のアドレスを格納すること。
*をつければつけただけ、ポインタが連鎖する。
これはポインタのアドレスを変更したいときに使う。
char *figure1;　//ポインタの宣言
char **figure2;　//ポインタのポインタを宣言

char buf1[50]="あいうえお";
char buf2[50]="かきくけこ";

//ポインタfigure1にbuf1の先頭アドレスを代入
figure1=buf1;

//ポインタのポインタfigure2にポインタfigure1のアドレスを格納
figure2=&figure1;

//figure2の中身（figure1）のアドレスをbuf2の先頭アドレスに入れ替える.
*figure2=buf2;

//表示
printf("%s\n",figure1); //出力"かきくけこ"

ポインタを整数に変換する
